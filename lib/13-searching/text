Problem
=======
 - insert randomly generated numbers into a set
 - they have to be inserted one-by-one
 - the set must not contain duplicates after a insertion
 - return a sorted set, with the requested size, after the last insertion


Solutions
=========
 1. Use a Hash, insert unless key exists, sort at the end
 2. Use a Array, insert unless element is included, sort at the end
 3. Use a Sorted-Linked-List, inserting at the position where the element belongs
 4. Use a Sorted-Array, find insertion position using binary-search


Time
====
 1. O(n) - lookups always take the same time
 2. O(n²) - the longer the array, the longer the lookup takes
 3. O(n²) - the longer the array, 1/2(mean) the longer the lookup takes
 4. n log n - divide and conquer


Performance
===========
Inserting x items in 2 seconds:
 1. 200_000
 2. 5_000
 3. ~1_250
 4. 20_000


Conclusion
==========
 - nothing beats linear time
 - when in doubt choose native objects/methods over self-built (2. vs 3.)
 - when self-built has a lower 'time', investigate performance